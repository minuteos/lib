/*
 * Copyright (c) 2025 triaxis s.r.o.
 * Licensed under the MIT license. See LICENSE.txt file in the repository root
 * for full license information.
 *
 * base/Pow10.h
 *
 * Helper class for conversion between binary and decimal exponents
 * used by atof and ftoa conversions
 *
 * Do not edit, this file is generated by Pow10.js in the same directory
 */

#pragma once

#include <base/base.h>

class Pow10
{
public:
    // configure an instance for the specified decimal exponent
    ALWAYS_INLINE Pow10(int k)
    {
        // precalculated decimal exponents
        static const uint32_t p10f[] =
        {
            // 10^-53 through 10^-1
            0xf5330471, 0x993fe2c7, 0xbf8fdb79, 0xef73d257, 0x95a86376, 0xbb127c54, 0xe9d71b69, 0x92267121, 0xb6b00d6a, 0xe45c10c4, 0x8eb98a7b, 0xb267ed19, 0xdf01e860, 0x8b61313c, 0xae397d8b, 0xd9c7dced, 0x881cea14, 0xaa242499, 0xd4ad2dc0, 0x84ec3c98, 0xa6274bbe, 0xcfb11ead, 0x81ceb32c, 0xa2425ff7, 0xcad2f7f5, 0xfd87b5f3, 0x9e74d1b8, 0xc6120625, 0xf79687af, 0x9abe14cd, 0xc16d9a01, 0xf1c90081, 0x971da050, 0xbce50865, 0xec1e4a7e, 0x9392ee8f, 0xb877aa32, 0xe69594bf, 0x901d7cf7, 0xb424dc35, 0xe12e1342, 0x8cbccc09, 0xafebff0c, 0xdbe6fecf, 0x89705f41, 0xabcc7712, 0xd6bf94d6, 0x8637bd06, 0xa7c5ac47, 0xd1b71759, 0x83126e98, 0xa3d70a3d, 0xcccccccd,
            // 10^0 through 10^53
            0x80000000, 0xa0000000, 0xc8000000, 0xfa000000, 0x9c400000, 0xc3500000, 0xf4240000, 0x98968000, 0xbebc2000, 0xee6b2800, 0x9502f900, 0xba43b740, 0xe8d4a510, 0x9184e72a, 0xb5e620f5, 0xe35fa932, 0x8e1bc9bf, 0xb1a2bc2f, 0xde0b6b3a, 0x8ac72305, 0xad78ebc6, 0xd8d726b7, 0x87867832, 0xa968163f, 0xd3c21bcf, 0x84595161, 0xa56fa5ba, 0xcecb8f28, 0x813f3979, 0xa18f07d7, 0xc9f2c9cd, 0xfc6f7c40, 0x9dc5ada8, 0xc5371912, 0xf684df57, 0x9a130b96, 0xc097ce7c, 0xf0bdc21b, 0x96769951, 0xbc143fa5, 0xeb194f8e, 0x92efd1b9, 0xb7abc627, 0xe596b7b1, 0x8f7e32ce, 0xb35dbf82, 0xe0352f63, 0x8c213d9e, 0xaf298d05, 0xdaf3f046, 0x88d8762c, 0xab0e93b7, 0xd5d238a5, 0x85a36367,
        };

        // corresponding binary exponents (all positive to fit a byte, negative are compensated below)
        static const uint8_t p10e[] =
        {
            // 10^-53 through 10^-1
            176, 172, 169, 166, 162, 159, 156, 152, 149, 146, 142, 139, 136, 132, 129, 126, 122, 119, 116, 112, 109, 106, 102, 99, 96, 93, 89, 86, 83, 79, 76, 73, 69, 66, 63, 59, 56, 53, 49, 46, 43, 39, 36, 33, 29, 26, 23, 19, 16, 13, 9, 6, 3,
            // 10^0 through 10^53
            1, 4, 7, 10, 14, 17, 20, 24, 27, 30, 34, 37, 40, 44, 47, 50, 54, 57, 60, 64, 67, 70, 74, 77, 80, 84, 87, 90, 94, 97, 100, 103, 107, 110, 113, 117, 120, 123, 127, 130, 133, 137, 140, 143, 147, 150, 153, 157, 160, 163, 167, 170, 173, 177,
        };

        unsigned index = k + 53;
        if (index < countof(p10f))
        {
            f = p10f[index];
            e = k < 0 ? -p10e[index] : p10e[index];
        }
        else
        {
            f = 0;
            e = 0;
        }
    }

    enum { Min = -53, Max = 53 };

    //! Checks whether conversion is supported
    constexpr bool IsValid() const { return !!f; }
    //! Get the decimal exponent of this instance
    constexpr int Exponent() const { return e; }
    //! Apply the conversion to the specified value - the decimal point is between high and low words of the result
    constexpr uint64_t Multiply(uint32_t v) const { return (v * uint64_t(f)); }

private:
    uint32_t f;
    int e;
};

